# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Test

stages:
  - stage: Terraformvalidation
    displayName: Terraform init and validate
    jobs:
      - job: Validate
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Azureconnection'
              backendAzureRmResourceGroupName: 'Rg1'
              backendAzureRmStorageAccountName: 'novalisbackend'
              backendAzureRmContainerName: 'novaliscontainer'
              backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'validate'
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: |
                *.tf
                *.tfvars
                 .terraform.lock.hcl
              TargetFolder: '$(Build.SourcesDirectory)/infra'
          
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.SourcesDirectory)/infra'
              artifact: 'Drop'
              publishLocation: 'pipeline'
  - stage: TerraformDeploy
    displayName: TerraformDeploy
    jobs:
      - job: Deploy
        steps:
           - task: TerraformInstaller@1
             inputs:
               terraformVersion: 'latest'
           - task: DownloadPipelineArtifact@2
             inputs:
               buildType: 'current'
               artifactName: 'Drop'
               targetPath: '$(Pipeline.Workspace)/infra'
           - task: TerraformTask@5
             inputs:
               provider: 'azurerm'
               command: 'plan'
               workingDirectory: '$(Pipeline.Workspace)/infra'
               environmentServiceNameAzureRM: 'Azureconnection'
           - task: TerraformTask@5
             inputs:
               provider: 'azurerm'
               command: 'apply'
               workingDirectory: '$(Pipeline.Workspace)/infra'
               environmentServiceNameAzureRM: 'Azureconnection'
 